- don't attach to events in the designer
- add recursive descent parser for operators
- fix auto-evaluation of langauge elements
- add all-markup sample equivalent of one method two bindings
- handle Call.Parameter for function calls
- write macro to format comment region
- rename MarkupObject to ResourceObject, etc.
- review how to handle For type
- change For: Operator plus Limit and Increment defaults to 1
- add types to function parameters, and report them at call time
- support multiple indexers in paths
- provide special handling for context across function calls
- discover and store ResourceObject upon first execution
- add way to apply Call to a collection
- remove try/catch from Call
- clean up MarkupConverter names, especially LoadActions, etc.
- clean up DebugWriteLine and ShowMessageBox
- add string operators
- finish MarkupCollection cleanup
- figure out why MarkupObjectExtension cannot be first item in Resources
- figure out why ExpressionCollection cannot be cast to an IEnumerable<IExpression>
- use to intentionally avoid documentation: /// <internalonly />
- add modules as a static dictionary for function lookup
- add timer
- add RoutedEventTrigger
- add MarkupMultiConverter
- Set: validate that Target is set (with unit test)
- Set: validate that Target has a two-way binding if PropertyName is omitted (with unit test)
- convert Type arguments to type or expression
- delay evaluation of MarkupObject properties until parent inheritance context is set
- statement collections should be read-only
- all collections should be read-only
- handle detaching
- optionally show exceptions in message boxes
- ToString with details for a composite object doesn't refresh its binding properly

Path Syntax:

"" - null
@ - Context
12345 - integral value
'abcdef' - string value
context.Property - property (in property context)
context.Method(arg, ...) - method (in any context)
context.Method - method (in call context)
[Namspace.Type].Method - static method
$Parameter - parameter (in property context)
$Function(arg, ...) - function (in any context)
$Function - function (in call context)
context[index] - item
context[index1][index2] - items can be chained
@[index] - item (if needed to disambiguate with static method)
(Context.path) - grouping
